```{r}
options(digits = 20)
```

```{r}
f <- function (x) { return(x^3 - cos(x)) }
fd <- function(x) { return(3*x^2+sin(x)) }

# Newtonova metoda
NewtonRootVariantA <- function(f, fd, xstart, acc=0.0000001) {
  x <- xstart
  count <- 0
  repeat {
    count <- count + 1
    dx <- f(x) / fd(x)
    x <- x - dx
    if (abs(dx) < acc) {
      print(count)
      return(x)
    }
  }
}
```

```{r}
NewtonRootVariantA(f, fd, 0.5, 10^(-15))
```

```{r}
f <- function (x) { return(x^3 - cos(x)) }
fd <- function(x) { return(3*x^2+sin(x)) }

# Modifikovaná Newtonova metoda, která aproximuje derivaci pomocí rozdílového podílu
NewtonRootVariantB <- function(f, fd, xstart, acc=0.0000001) {
  x <- xstart
  h <- acc
  count <- 0
  repeat {
    count <- count + 1
    dx <- h*f(x) / (f(x+h)-f(x))
    x <- x - dx
    if (abs(dx) < acc) {
      print(count)
      return(x)
    }
  }
}
```

```{r}
NewtonRootVariantB(f, fd, 0.5, 10^(-15))
```

```{r}
f <- function (x) { return(x^3 - cos(x)) }
fd <- function(x) { return(3*x^2+sin(x)) }

# Steffensenova metoda
NewtonRootVariantC <- function(f, fd, xstart, acc=0.0000001) {
  x <- xstart
  h <- acc
  count <- 0
  repeat {
    count <- count + 1
    y <- f(x)
    dx <- y^2 / (f(x+y)-y)
    x <- x - dx
    if (abs(dx) < acc) {
      print(count)
      return(x)
    }
  }
}
```

```{r}
NewtonRootVariantC(f, fd, 0.5, 10^(-15))
```

```{r}
f <- function (x) { return(x^3 - cos(x)) }
fd <- function(x) { return(3*x^2+sin(x)) }
fdd <- function(x) { return(6*x + cos(x)) }

# Halleyova metoda
# fdd - druhá derivace
NewtonRootVariantD <- function(f, fd, fdd, xstart, acc=0.0000001) {
  x <- xstart
  h <- acc
  count <- 0
  repeat {
    count <- count + 1
    y <- f(x)
    yd <- fd(x)
    dx <- 2*y*yd/(2*yd*yd-y*fdd(x))
    x <- x - dx
    if (abs(dx) < acc) {
      print(count)
      return(x)
    }
  }
}
```

```{r}
NewtonRootVariantD(f, fd, fdd, 1.4, 10^(-7))
```

```{r}
HalleySquareRoot <- function(a, acc=0.0000001) {
  x <- a
  count <- 0
  repeat {
    count <- count + 1
    xx = x^2
    dx <- (xx - a)*2*x/(3*xx+a)
    x <- x - dx
    if (abs(dx) < acc) {
      print(count)
      return(x)
    }
  }
}
```

```{r}
HalleySquareRoot(150)
```

```{r}
f <- function (x) { return(x^3 - cos(x)) }
fd <- function(x) { return(3*x^2+sin(x)) }
fdd <- function(x) { return(6*x + cos(x)) }

Horner <- function(a, x) {
  n <- length(a)
  y <- a[n]
  yd <- y
  for (i in (n-1):2) {
    y <- y*x+a[i]
    yd <- yd*x+y
  }
  y <- y*x+a[1]
  return(c(y, yd))
}
a <- c(1, -4, -7, 22, 24)
Horner(a, 3)

NewtonHorner <- function(a, xstart, acc=0.0000001) {
  n <- length(a)
  x <- xstart
  count <- 0
  repeat {
    count <- count + 1
    y <- a[n]
    
    yd <- y
    for (i in (n-1):2) {
      y <- y*x+a[i]
      yd <- yd*x+y
    }
    y <- y*x+a[1]
    
    dx <- y/yd
    x <- x-dx
    
    if (abs(dx) < acc) {
      print(count)
      return(x)
    }
  }
}
```

```{r}
NewtonHorner(c(-2, 0, 1), 2)
```
